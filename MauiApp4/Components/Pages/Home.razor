@page "/"
@page "/Home/{id:int}"

@inject NavigationManager Navigation

<EditForm Model="@cliente" OnValidSubmit="SalvarCliente">

	<div class="col-5">
		<label for="nome">Nome:</label><br>
		<InputText class="form-control col-5" id="nome" @bind-Value="cliente.nome" required /><br>

		<label for="cpf">CPF:</label><br>
		<InputText class="form-control col-5" id="cpf" @bind-Value="cliente.cpf" required /><br>

		<label for="telefone">Telefone:</label><br>
		<InputText class="form-control col-5" id="telefone" @bind-Value="cliente.telefone" required /><br>
		<br>
		<button class="btn btn-primary" type="submit">Enviar</button>
		<button class="btn btn-info" @onclick="lista">lista</button>
		@if (!string.IsNullOrEmpty(mensagemTemporaria))
		{
			<p class="@textColor">@mensagemTemporaria</p>
		}
	</div>
</EditForm>
<br>

@code {
	[Parameter]
	public int id { get; set; }

	Cliente cliente = new();
	bool salvando;
	bool salvou;
	string mensagemTemporaria = "";
	string textColor = "";

	protected override async Task OnInitializedAsync()
	{
		if (id > 0)
		{
			cliente = await new ClienteDAO().BuscarClientePorID(id);
		}
	}

	private async Task SalvarCliente()
	{
		if (salvando)
		{
			return;
		}

		salvando = true;

		if (id > 0)
		{
			await new ClienteDAO().AtualizarCliente(cliente);
		}

		else
		{
			salvou = await new ClienteDAO().SalvarCadastro(cliente);
			await MensagemTemporaria3s(salvou);
		}

		salvando = false;
	}

	private void lista()
	{
		Navigation.NavigateTo("/lista");
	}

	private async Task MensagemTemporaria3s(bool salvou)
	{
		if (salvou)
		{
			mensagemTemporaria = "salvo com sucesso";
			textColor = "text-primary";
			cliente = new Cliente();
		}

		else
		{
			mensagemTemporaria = "Deu um errinho basico";
			textColor = "text-danger";
		}

		StateHasChanged();	
		await Task.Delay(2000);
		StateHasChanged();
		mensagemTemporaria = string.Empty;
	}
}
